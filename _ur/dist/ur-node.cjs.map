{
  "version": 3,
  "sources": ["../common/declare-console.js", "../common/prompts.js", "../common/declare-async.js", "../node/all-node.mts", "../node/appserver.mts", "../node/class-urmodule.mts"],
  "sourcesContent": ["/*///////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\\\n\n  description\n\n\\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * /////////////////////////////////////*/\n\n/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/// list of color formats ('tags') to support for both browser and ansi terms\nconst COMMON_FORMATS = [\n  'TagYellow',\n  'TagRed',\n  'TagGreen',\n  'TagCyan',\n  'TagBlue',\n  'TagPurple',\n  'TagPink',\n  'TagGray',\n  'TagNull'\n];\n\n/// TERMINAL COLORS ///////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nconst TERM_COLORS = {\n  // TOUT = makeTerminalOut(str); TOUT('hi')\n  Reset: '\\x1b[0m',\n  Bright: '\\x1b[1m',\n  Dim: '\\x1b[2m',\n  Underscore: '\\x1b[4m',\n  Blink: '\\x1b[5m',\n  Reverse: '\\x1b[7m',\n  Hidden: '\\x1b[8m',\n  //\n  Black: '\\x1b[30m',\n  White: '\\x1b[37m',\n  Red: '\\x1b[31m',\n  Yellow: '\\x1b[33m',\n  Green: '\\x1b[32m',\n  Cyan: '\\x1b[36m',\n  Blue: '\\x1b[34m',\n  Magenta: '\\x1b[35m',\n  //\n  BgBlack: '\\x1b[40m',\n  BgRed: '\\x1b[41m',\n  BgYellow: '\\x1b[43m',\n  BgCyan: '\\x1b[46m',\n  BgGreen: '\\x1b[42m',\n  BgBlue: '\\x1b[44m',\n  BgPurple: '\\x1b[45m',\n  BgWhite: '\\x1b[47m',\n\n  // FORMATS\n  TagYellow: '\\x1b[43;30m',\n  TagRed: '\\x1b[41;37m',\n  TagGreen: '\\x1b[42;30m',\n  TagCyan: '\\x1b[46;37m',\n  TagBlue: '\\x1b[44;37m',\n  TagPurple: '\\x1b[45;37m',\n  TagPink: '\\x1b[105;1m',\n  TagGray: '\\x1b[100;37m',\n  TagNull: '\\x1b[2;37m'\n};\n\n/// CONSOLE CSS COLORS ////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nconst CSS_COMMON = 'padding:3px 5px;border-radius:2px;';\nconst CSS_COLORS = {\n  Reset: 'color:auto;background-color:auto',\n  // COLOR FOREGROUND\n  Black: 'color:black',\n  White: 'color:white',\n  Red: 'color:red',\n  Yellow: 'color:orange',\n  Green: 'color:green',\n  Cyan: 'color:cyan',\n  Blue: 'color:blue',\n  Magenta: 'color:magenta',\n  // COLOR BACKGROUND\n  TagRed: `color:#000;background-color:#f66;${CSS_COMMON}`,\n  TagYellow: `color:#000;background-color:#fd4;${CSS_COMMON}`,\n  TagGreen: `color:#000;background-color:#5c8;${CSS_COMMON}`,\n  TagCyan: `color:#000;background-color:#2dd;${CSS_COMMON}`,\n  TagBlue: `color:#000;background-color:#2bf;${CSS_COMMON}`,\n  TagPurple: `color:#000;background-color:#b6f;${CSS_COMMON}`,\n  TagPink: `color:#000;background-color:#f9f;${CSS_COMMON}`,\n  TagGray: `color:#fff;background-color:#999;${CSS_COMMON}`,\n  TagNull: `color:#999;border:1px solid #ddd;${CSS_COMMON}`,\n  // COLOR BACKGROUND DARK (BROWSER ONLY)\n  TagDkRed: `color:white;background-color:red;${CSS_COMMON}`,\n  TagDkGreen: `color:white;background-color:green;${CSS_COMMON}`,\n  TagDkBlue: `color:white;background-color:blue;${CSS_COMMON}`,\n  TagDkOrange: `color:white;background-color:orange;${CSS_COMMON}`\n};\n\nTERM_COLORS.TagSystem = TERM_COLORS.TagGray;\nTERM_COLORS.TagUR = TERM_COLORS.TagBlue;\nTERM_COLORS.TagNetwork = TERM_COLORS.TagCyan;\nTERM_COLORS.TagApp = TERM_COLORS.TagPink;\nTERM_COLORS.TagTest = TERM_COLORS.TagRed;\nTERM_COLORS.TagDebug = TERM_COLORS.TagRed;\nTERM_COLORS.TagData = TERM_COLORS.TagGreen;\nTERM_COLORS.TagInput = TERM_COLORS.TagBlue;\n\nCSS_COLORS.TagSystem = CSS_COLORS.TagGray;\n// CSS_COLORS.TagUR = `color:#fff;background-color:CornflowerBlue;${CSS_COMMON}`;\nCSS_COLORS.TagUR = `color:CornflowerBlue;border:1px solid CornflowerBlue;${CSS_COMMON}`;\nCSS_COLORS.TagUR2 = `color:#fff;background-color:Navy;${CSS_COMMON}`;\nCSS_COLORS.TagNetwork = CSS_COLORS.TagCyan;\nCSS_COLORS.TagApp = CSS_COLORS.TagPink;\nCSS_COLORS.TagTest = CSS_COLORS.TagRed;\nCSS_COLORS.TagDebug = `color:#fff;background-color:IndianRed;${CSS_COMMON}`;\nCSS_COLORS.TagData = CSS_COLORS.TagDkOrange;\nCSS_COLORS.TagInput = CSS_COLORS.TagDkOrange;\nCSS_COLORS.TagMessage = `color:#fff;background-color:MediumSlateBlue;${CSS_COMMON}`;\nCSS_COLORS.TagPhase = `color:#fff;background-color:MediumVioletRed;${CSS_COMMON}`;\nCSS_COLORS.TagAlert = `color:#fff;background:linear-gradient(\n  -45deg,\n  rgb(29,161,242),\n  rgb(184,107,107),\n  rgb(76,158,135)\n);${CSS_COMMON}`;\nCSS_COLORS.TagUR3 = `color:#fff;background:linear-gradient(\n  -45deg,\n  CornflowerBlue 0%,\n  LightSkyBlue 25%,\n  RoyalBlue 100%\n);${CSS_COMMON}`;\n\n/// DERIVED DATA //////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nfunction m_ExtractNames(dict) {\n  const tags = [];\n  const ansi = [];\n  Object.keys(dict).forEach(k => {\n    if (k.startsWith('Tag')) tags.push(k);\n    else ansi.push(k);\n  });\n  return [tags, ansi];\n}\nconst [SUPPORTED_TAG_NAMES, SUPPORTED_ANSI_NAMES] = m_ExtractNames(TERM_COLORS);\n\n/// EXPORTS ///////////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nmodule.exports = {\n  TERM_COLORS,\n  CSS_COLORS,\n  //\n  SUPPORTED_TAG_NAMES,\n  SUPPORTED_ANSI_NAMES\n};\n", "/*///////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\\\n\n  ANSI TERMINAL color codes and utilities\n\n\\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * /////////////////////////////////////*/\n\nconst IS_NODE = typeof window === 'undefined';\nconst IS_MOBILE =\n  !IS_NODE &&\n  /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(\n    navigator.userAgent\n  );\nconst D_CONSOLE = require('./declare-console.js');\nconst { TERM_COLORS, CSS_COLORS } = D_CONSOLE;\n\nconst DEFAULT_PADDING = IS_NODE\n  ? 10 // nodejs\n  : 8; // not nodejs\nconst DEFAULT_SPACE = IS_NODE\n  ? ' '.padStart(DEFAULT_PADDING, ' ')\n  : ' '.padStart(DEFAULT_PADDING + 4, ' ');\n\nconst DEFAULT_COLOR = 'TagNull';\n\n// div console\nconst HTCONSOLES = {};\n\n/// OUTPUT CONTROL ////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** define\n */\nconst SHOW = true;\nconst HIDE = false;\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nconst PROMPT_DICT = {\n  // URSYS-RELATED MODULES\n  'UR': [SHOW, 'TagRed'],\n  // SERVERS\n  'APPSRV': [SHOW, 'Yellow'],\n  'GEMSRV': [SHOW, 'Yellow'],\n  // SPECIAL\n  '-': [SHOW, 'TagNull']\n};\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** Pad string to fixed length, with default padding depending on\n *  whether the environment is node or browser\n */\nfunction padString(str, padding = DEFAULT_PADDING) {\n  let len = str.length;\n  const nbsp = String.fromCharCode(0x00a0); // unicode non-break space\n  if (IS_NODE) return `${str.padEnd(padding, ' ')}`;\n  // must be non-node environment, so do dynamic string adjust\n  if (padding === 0) return `${str}`;\n  // if this far, then we're truncating\n  if (len >= padding) str = str.substr(0, padding);\n  else str = str.padEnd(padding, nbsp);\n  return `${str}`;\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** add a color to the PROMPT_DICT for a particular PREFIX */\nfunction m_SetPromptColors(match, color = DEFAULT_COLOR) {\n  if (typeof match !== 'string') throw Error('match prompt must be string');\n  match = match.trim();\n  if (match === '') throw Error('match prompt cannot be empty');\n  let colorTable = IS_NODE ? TERM_COLORS : CSS_COLORS;\n  let validColor = false;\n  validColor = colorTable[color] !== undefined;\n  if (!validColor) colorTable = IS_NODE ? CSS_COLORS : TERM_COLORS;\n  validColor = colorTable[color] !== undefined;\n  if (!validColor)\n    throw Error(`prompt color ${color} is not defined in either table`);\n  // turn on color prompt\n  PROMPT_DICT[match] = [true, color];\n  return colorTable;\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** Based on current detected enviroment, return either ANSI terminal or\n *  css based color markers for use in debugging messages. If tagColor is\n *  defined and corresponds to color definition, it is used to set the color.\n *  This is so users can set their own color prompts without editing\n *  PROMPTS_DICT structure.\n */\nfunction m_GetEnvColor(prompt, tagColor) {\n  const colorTable = m_SetPromptColors(prompt, tagColor);\n  const [dbg_mode, defcol] = PROMPT_DICT[prompt.trim()] || [SHOW, DEFAULT_COLOR];\n  const ucolor = colorTable[tagColor];\n  const dcolor = colorTable[defcol];\n  const color = ucolor || dcolor;\n  const reset = colorTable.Reset;\n  return [dbg_mode, color, reset];\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** Returns an array suitable for destructuring inside console.log() in\n *  either Node or the browser with color\n */\nfunction m_MakeColorArray(prompt, colorName) {\n  const [dbg, color, reset] = m_GetEnvColor(prompt, colorName);\n  // return empty array if debugging disabled in browser\n  // or debugging is enabled but it's node (de morgan's law)\n  if (!(dbg || IS_NODE)) return [];\n  return IS_NODE\n    ? [`${color}${padString(prompt)}${reset}   `] // server\n    : [`%c${padString(prompt)}%c `, color, reset]; // browser\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** Returns an environment-specific color wrapper function suitable for use\n *  in debug output\n */\nfunction m_MakeColorPromptFunction(prompt, colorName, resetName = 'Reset') {\n  return IS_NODE\n    ? (str, ...args) => {\n        if (args === undefined) args = '';\n        console.log(\n          `${TERM_COLORS[colorName]}${padString(prompt)}${TERM_COLORS.Reset}${\n            TERM_COLORS[resetName]\n          }    ${str}`,\n          ...args\n        );\n      }\n    : (str, ...args) => {\n        if (args === undefined) args = '';\n        console.log(\n          `%c${padString(prompt)}%c%c ${str}`,\n          CSS_COLORS.Reset,\n          CSS_COLORS[resetName],\n          ...args\n        );\n      };\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nfunction m_GetDivText(id) {\n  const el = document.getElementById(id);\n  if (!el) {\n    console.log(`GetDivText: element ${id} does not exist`);\n    return undefined;\n  }\n  const text = el.textContent;\n  if (text === undefined) {\n    console.log(`HTMLTextOut: element ${id} does not have textContent`);\n    return {};\n  }\n  el.style.whiteSpace = 'pre';\n  el.style.fontFamily = 'monospace';\n  return { element: el, text };\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nfunction m_HTMLTextJumpRow(row, lineBuffer, id) {\n  const { element, text } = m_GetDivText(id);\n  if (text === undefined) return lineBuffer;\n  // convert content to line buffer\n  if (lineBuffer.length === 0) {\n    console.log(`initializing linebuffer from element id='${id}'`);\n    lineBuffer = text.split('\\n'); // creates a NEW array\n  }\n  // handle line underflow in buffer if row exceeds line buffer\n  if (row > lineBuffer.length - 1) {\n    const count = row + 1 - lineBuffer.length;\n    for (let i = count; i > 0; i--) lineBuffer.push('');\n  }\n  return lineBuffer;\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nfunction m_HTMLTextPrint(str = '', lineBuffer, id) {\n  const { element, text } = m_GetDivText(id);\n  if (!text) return lineBuffer;\n  // append text\n  lineBuffer.push(str);\n  element.textContent = lineBuffer.join('\\n');\n  return lineBuffer;\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** Function to modify the text area of a passed HTML element. Always return\n *  lineBuffer so we can reassign the reference, as the array often changes.\n */\nfunction m_HTMLTextPlot(str = '', lineBuffer, id, row = 0, col = 0) {\n  const { element, text } = m_GetDivText(id);\n  if (!element) return lineBuffer;\n  if (text === undefined) {\n    console.log(`HTMLTextOut: element ${id} does not have textContent`);\n    return lineBuffer;\n  }\n  // ensure row exists\n  lineBuffer = m_HTMLTextJumpRow(row, lineBuffer, id);\n  // fetch line\n  let line = lineBuffer[row];\n  if (line === undefined) {\n    console.log(`HTMLTextOut: unexpected line error for line ${row}`);\n    return lineBuffer;\n  }\n  // handle column underflow in line if col exceeds line length\n  if (col + str.length > line.length + str.length) {\n    for (let i = 0; i < col + str.length - line.length; i++) line += ' ';\n  }\n  // insert str into line\n  let p1 = line.substr(0, col);\n  let p3 = line.substr(col + str.length, line.length - (col + str.length));\n  lineBuffer[row] = `${p1}${str}${p3}`;\n  // write buffer back out\n  element.textContent = lineBuffer.join('\\n');\n  return lineBuffer;\n}\n\n/// API METHODS ///////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** Return a function that will prompt strings for you. The function will\n *  returns an array to destructure into console.log(). This is supported\n *  in Chrome and Safari (somewhat), but not in Firefox as of last testing.\n *\n *  To create the function, provide a short PROMPT. This will be color coded\n *  according to the PROMPTS_DICT table, or gray otherwise. You can turn off the\n *  debug output for all PROMPTS in a category also for centralized debug\n *  statement control.\n *\n *  The prompt function accepts a string followed by any number of parameters.\n *  It returns an array of values that are destructured inside of console.log()\n *    const promptFunction = makeLoginHelper('APP');\n *    console.log(...promptFunction('huzzah'));\n *\n *  NOTE: This doesn't work as expected on NodeJS, because empty arrays\n *  render as linefeeds so we just output it regardless. If you want to\n *  disable output, use the makeTerminalOut() function instead.\n */\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** allow modification of the PROMPT_DICT\n */\nfunction makeStyleFormatter(prompt, tagColor) {\n  if (prompt.startsWith('UR') && tagColor === undefined) tagColor = 'TagUR';\n  let outArray = m_MakeColorArray(prompt, tagColor);\n  if (outArray.length === 0) return () => [];\n  if (IS_MOBILE) outArray = [`${prompt}:`];\n  const f = (str, ...args) => [...outArray, str, ...args];\n  f._ = `\\n${DEFAULT_SPACE}`;\n  return f;\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** return an array that can be spread like console.log(...arr) */\nfunction makeErrorFormatter(pr = '') {\n  const bg = 'rgba(255,0,0,1)';\n  const bga = 'rgba(255,0,0,0.15)';\n  pr = `ERROR ${pr}`.trim();\n  return (str, ...args) => [\n    `%c${pr}%c${str}`,\n    `color:#fff;background-color:${bg};padding:3px 7px 3px 10px;border-radius:10px 0 0 10px;`,\n    `color:${bg};background-color:${bga};padding:3px 5px;`,\n    ...args\n  ];\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** return an array that can be spread like console.log(...arr) */\nfunction makeWarningFormatter(pr = '') {\n  const bg = 'rgba(255,150,0,1)';\n  const bga = 'rgba(255,150,0,0.15)';\n  pr = `WARN ${pr}`.trim();\n  return (str, ...args) => [\n    `%c${pr}%c${str}`,\n    `color:#fff;background-color:${bg};padding:3px 7px 3px 10px;border-radius:10px 0 0 10px;`,\n    `color:${bg};background-color:${bga};padding:3px 5px;`,\n    ...args\n  ];\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** use like console.log(...debugFormatter('prompt'), 'la la la'); */\nfunction dbgPrint(pr, bg = 'MediumVioletRed') {\n  return [\n    `%c${pr}%c`,\n    `color:#fff;background-color:${bg};padding:3px 10px;border-radius:10px;`,\n    'color:auto;background-color:auto'\n  ];\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nfunction colorTagString(str, tagColor) {\n  return m_MakeColorArray(str, tagColor);\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** Return function to directly print to console instead of returning an array.\n *  This works better for NodeJS since the empty [] still results in output\n *  unlike the browser. Use makeStyleFormatter for browsers\n */\nfunction makeTerminalOut(prompt, tagColor = DEFAULT_COLOR) {\n  const wrap = m_MakeColorPromptFunction(prompt, tagColor);\n  wrap.warn = m_MakeColorPromptFunction(prompt, 'TagGreen', 'Green');\n  wrap.error = m_MakeColorPromptFunction(prompt, 'TagRed', 'Red');\n  return wrap;\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** Return function to print a string, given a DIV id and optional row/column.\n */\nfunction makeHTMLConsole(divId, row = 0, col = 0) {\n  const ERP = makeStyleFormatter('makeHTMLConsole', 'Red');\n  let buffer = [];\n  if (typeof divId !== 'string') throw Error('bad id');\n  if (!document.getElementById(divId)) {\n    console.warn(...ERP(`id '${divId}' doesn't exist`));\n    return {\n      print: () => {},\n      plot: () => {},\n      clear: () => {},\n      gotoRow: () => {}\n    };\n  }\n  let hcon;\n  if (HTCONSOLES[divId]) {\n    hcon = HTCONSOLES[divId];\n  } else {\n    hcon = {\n      buffer: [],\n      plot: (str, y = row, x = col) => {\n        buffer = m_HTMLTextPlot(str, buffer, divId, y, x);\n      },\n      print: str => {\n        buffer = m_HTMLTextPrint(str, buffer, divId);\n      },\n      clear: (startRow = 0, endRow = buffer.length) => {\n        buffer.splice(startRow, endRow);\n      },\n      gotoRow: row => {\n        buffer = m_HTMLTextJumpRow(row, buffer, divId);\n      }\n    };\n    HTCONSOLES[divId] = hcon;\n  }\n  return hcon;\n}\n\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** Print all Tag Colors\n */\nfunction printTagColors() {\n  const colortable = IS_NODE ? TERM_COLORS : CSS_COLORS;\n  const colors = Object.keys(colortable).filter(element => element.includes('Tag'));\n  const reset = colortable.Reset;\n  const out = 'dbg_colors';\n  if (!IS_NODE) console.groupCollapsed(out);\n  colors.forEach(key => {\n    const color = colortable[key];\n    const items = IS_NODE\n      ? [`${padString(out)} - (node) ${color}${key}${reset}`]\n      : [`(browser) %c${key}%c`, color, reset];\n    console.log(...items);\n  });\n  if (!IS_NODE) console.groupEnd();\n}\n\n/// MODULE EXPORTS ////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nmodule.exports = {\n  TERM: TERM_COLORS,\n  CSS: CSS_COLORS,\n  padString,\n  makeStyleFormatter,\n  makeErrorFormatter,\n  makeWarningFormatter,\n  dbgPrint,\n  makeTerminalOut,\n  makeHTMLConsole,\n  printTagColors,\n  colorTagString\n};\n", "/*///////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\\\n\n  All declare modules are dependency-free so can be imported by anyone\n\n\\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * /////////////////////////////////////*/\n\n/// MAIN LIFECYCLE EVENTS /////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/// This is a standardized lifecycle for our applications. These are\n/// the lifecycle events that fire and can be hooked by interested modules\nconst APP_LIFECYCLE = {\n  SETUP: [\n    'INITIALIZE', // module data structure init\n    'NETWORK', // connected to network\n    'CONNECT', // connected as registered UR application\n    'LOAD', // load any external data, make connections\n    'CONFIG', // configure runtime data structures\n    'ALLOCATE' // alloca\n  ],\n  RUN: [\n    'READY', // when viewsystem has completely composed\n    'START', // start normal execution run\n    'RUN', // system starts running\n    'UPDATE', // system is running (periodic call w/ time)\n    'STATUS', // system status message\n    'STOP' // system wants to stop current rons\n  ],\n  ASYNC: [\n    'FREEZE', // system wants to pause run\n    'UNFREEZE' // system has paused (periodic call w/ time)\n  ],\n  SHUTDOWN: [\n    'DEALLOCATE', // release memory resourcesun\n    'UNLOAD', // system releases any connecti\n    'SHUTDOWN', // system is shutting down\n    'ZOMBIE', // system is dead and needs to reinitialize\n    'EXIT' // system has ended\n  ],\n  EXCEPTION: [\n    'DISCONNECT', // unisys server has gone offline\n    'RECONNECT', // unisys server has reconnected\n    'NETWORK_LOST', // network connection lost\n    'APP_HALT' // system and thrown an error\n  ]\n};\n\n/// CHILD STATUS EVENTS ///////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/// These are events emitted by a UR-format command module The key ones are\n/// MESSAGE and STOP or EXIT.\nconst UR_EVENTS = {\n  // dataex module events appear in {dataex,data} message object\n  DATAEX: [\n    // UrModule initial handshake\n    '_CONFIG_REQ', // Receive UrModule setup data\n    '_CONFIG_ACK', // on configuration, return config data to UrModule instance\n    // upstream module messages to downstream module\n    'DATA', // data: chunk from upstream module\n    'RESPONSE', // control: response from upstream module\n    // downstream module messages to upstream module\n    'initialize', // status: downstream module init\n    'start', // status:about to start\n    'run', // status: has started running\n    'status', // status: periodic update\n    'error', // status: process-terminating error, w status\n    'stop', // status: process stoppeed\n    'exit', // status: process terminated w/ errcode\n    'result', // data: result of operation\n    'request' // control: request upstream RESPONSE\n  ]\n};\n\n/// NODEJS EVENT EMITTER //////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/// these\nconst EMITTER = {\n  addListener: (event, listener) => {},\n  emit: (event, [...args]) => {},\n  eventNames: () => {},\n  getMaxListeners: () => {},\n  listenerCount: eventName => {},\n  listeners: eventName => {},\n  off: (eventName, listener) => {},\n  on: (eventName, listener) => {},\n  once: (eventName, listener) => {},\n  prependListener: (eventName, listener) => {},\n  prependOnceListener: (eventName, listener) => {},\n  removeAllListeners: ([eventName]) => {},\n  removeListener: (eventName, listener) => {},\n  setMaxListeners: n => {},\n  rawListeners: eventName => {}\n};\n\n/// EXPORTS ///////////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nmodule.exports = {\n  APP_LIFECYCLE,\n  UR_EVENTS\n};\n", "import * as APPSERVER from './appserver.mts';\nimport UrModule from './class-urmodule.mts';\n\nexport default {\n  APPSERVER,\n  UrModule\n};\n", "/*///////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\\\n\n  placeholder appserver library\n\n\\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * /////////////////////////////////////*/\n\nimport { watch } from 'chokidar';\nimport express from 'express';\nimport { makeTerminalOut } from '../common/prompts.js';\n\n/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nconst TERM = makeTerminalOut('UR', 'TagBlue');\n\n/// WEBSERVER STUFF ///////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nlet APP_OUT = [];\nconst GetAppOut = () => APP_OUT.join('\\n');\nconst WriteAppOut = msg => APP_OUT.push(msg);\nconst ClearAppOut = () => (APP_OUT = []);\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nfunction StartAppServer() {\n  const app = express();\n  app.get('/', (req, res) => {\n    let text = GetAppOut();\n    res.send(`<pre>${text}</pre>`);\n  });\n  const server = app.listen(3000, () => {\n    TERM('Example app listening on port 3000!');\n  });\n  // close express app on process exit\n  process.on('exit', () => {\n    TERM('exiting express app');\n    server.close();\n  });\n  // close express app on ctrl-c event\n  process.on('SIGINT', () => {\n    console.log('exiting express app');\n    server.close(err => {\n      if (err) {\n        TERM.error(err);\n        process.exit(1);\n      }\n      process.exit();\n    });\n  });\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nfunction Watch() {\n  /** watch for changes to path **/\n  const watcher = watch('./_ur/**');\n  watcher.on('change', path => {\n    TERM('watcher: path changed', path);\n    // proc_peggy.send('test');\n  });\n}\n\n/// EXPORTS ///////////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\nexport default {\n  StartAppServer,\n  Watch,\n  //\n  GetAppOut,\n  WriteAppOut,\n  ClearAppOut\n};\n", "/*///////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\\\n\n  All declare modules are dependency-free so can be imported by anyone\n\n\\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * /////////////////////////////////////*/\n\nimport { EventEmitter } from 'node:events';\nimport { Readable, Writable, Duplex, Transform } from 'node:stream';\nimport D_ASYNC from '../common/declare-async.js';\nconst { URDEX } = D_ASYNC.UR_EVENTS;\nimport { ChildProcess } from 'node:child_process';\n\n/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nimport { makeTerminalOut } from '../common/prompts.js';\nconst LOG = makeTerminalOut(' URMOD', 'TagYellow');\nconst DBG = true;\n\n/// CLASS UR MODULE ///////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** standardized interface for modules that are capable of\n *  chaining stream-style operations as well as providing an API interface\n */\nclass UrModule {\n  //\n  id = undefined;\n  modObj = undefined; // the wrapped module\n  modName = ''; // descriptive name (optional)\n  modType = ''; // modType of module object implementation\n  modIn = undefined; // instance of UrModule\n  modOut = undefined; // instance of UrModule\n  //\n  protocol = undefined;\n  inputBuffer = [];\n  outputBuffer = [];\n  error = '';\n  //\n  static modtype_enum = ['null', 'event', 'fork', 'stream', 'urnet'];\n  static buffer_size = 100;\n  static id_counter = 100;\n\n  /** constructor\n   *  this class wraps the provided object with a standardized interface,\n   *  supporting the types defined in this.modtype_enum. It performs a runtime\n   *  check to determine the modType of the provided object.\n   *  @param {object} obj an eventEmitter, process, or stream\n   *  @param {object} modIn instance of UrModule\n   *  @param {object} modOut instance of UrModule\n   */\n  constructor(mobj, opt) {\n    this.protocol = undefined;\n    this.modType = UrModule.modtype_enum[0];\n    this.id = UrModule.id_counter++;\n    this.manageFork = this.manageFork.bind(this);\n    const { input, output, name } = opt || {};\n    if (typeof name === 'string') this.setName(name);\n    //\n    LOG(`UrModule[${u_modname(this)}] constructing`);\n    //\n    if (mobj instanceof ChildProcess) {\n      this.modType = 'fork';\n      this.modObj = mobj;\n      this.manageFork();\n    } else if (u_is_stream(mobj)) {\n      // placeholder test for stream\n      this.modType = 'stream';\n    } else if (mobj.HandleMessage && mobj.Call) {\n      // placeholder test for ur messager\n      this.modType = 'urnet';\n    } else if (mobj instanceof EventEmitter) {\n      // placeholder test for eventEmitters\n      this.modType = 'event';\n    } else {\n      this.error = 'UrModule(): not an eventEmitter, process, or stream';\n      console.log(this.error);\n      throw new Error(this.error);\n    }\n    this.linkModules(input, output);\n  }\n\n  /** set the name of the module */\n  setName(name) {\n    if (typeof name !== 'string')\n      throw new Error('UrModule.setName(): name must be a string');\n    this.modName = name;\n  }\n\n  /** set up the handler for a child process that is compatible with\n   *  the UrModule interface.\n   */\n  manageFork() {\n    if (this.modObj === undefined) throw new Error('manageFork(): modObj undefined');\n    // (1) set up message handler\n    this.modObj.on('message', msg => {\n      LOG(`[${u_modname(this)}] DATAEX:`, msg);\n\n      const { dataex, data } = msg;\n      if (dataex === '_CONFIG_ACK') {\n        const { protocol } = data;\n        if (typeof protocol === 'string') {\n          this.protocol = protocol;\n          // activate connections set on startup\n          this.activateInput();\n          this.activateOutput();\n        }\n      }\n    });\n    // initiate configuration\n    this.modObj.send({ dataex: '_CONFIG_REQ', data: {} });\n  }\n\n  /** initializes datalink for connected modules. it's called\n   *  by the constructor implictly.\n   */\n  linkModules(modIn, modOut) {\n    if (this.modIn !== undefined || this.modOut !== undefined) {\n      this.error = 'UrModule.linkModules(): already linked';\n      throw new Error(this.error);\n    }\n    if (modIn !== undefined) {\n      if (modIn instanceof UrModule) {\n        this.modIn = modIn;\n      } else {\n        this.error = 'UrModule.connect(): invalid modIn';\n        throw new Error(this.error);\n      }\n    }\n    if (modOut !== undefined) {\n      if (modOut instanceof UrModule) {\n        this.modOut = modOut;\n      } else {\n        this.error = 'UrModule.connect(): invalid modOut';\n        throw new Error(this.error);\n      }\n    }\n  }\n\n  /** the input modules are a data source, so we expect to\n   *  receive data messages as well as handshake information.\n   *  Uses URDEX protocol: expects 'DATA' message\n   */\n  activateInput() {\n    this.modIn.on('message', msg => {\n      const { dataex, data } = msg;\n      // handler of data and control messages from upstream module\n      switch (dataex) {\n        case 'DATA':\n          this.bufferInput(data);\n          break;\n        default:\n          LOG('unhandled input dataex:', dataex);\n          break;\n      }\n    });\n    LOG('awaiting input');\n  }\n\n  /** the output modules will communicate their status back\n   *  to this module, providing events to signal what's going\n   *  on.\n   *  Uses URDEX protocol\n   */\n  activateOutput() {\n    LOG('connecting to output module');\n\n    // handler of control messages from downstream module\n    // note difference between stream and child process events\n    // child uses 'message'\n    this.modOut.on('message', msg => {\n      const { dataex, data } = msg;\n      switch (dataex) {\n        case 'exit':\n          break;\n        default:\n          LOG('unknown output dataex:', dataex);\n          break;\n      }\n    });\n  }\n\n  /** URDEX PROTOCOL *********************************************************/\n\n  /** used to buffer input data as it is received, but not processed. Each\n   *  chunk of data is of whatever modType is to be expected from the upstream\n   *  module.\n   *  @param {object} data the data to be buffered\n   */\n  bufferInput(data = {}) {\n    this.inputBuffer.push(data);\n    if (this.inputBuffer.length > UrModule.buffer_size) {\n      this.error = 'overflow';\n    }\n  }\n  /** retrieve buffered data one chunk at a time */\n  getInputData() {\n    if (this.inputBuffer.length === 0) {\n      this.error = 'underflow';\n      return undefined;\n    }\n    this.error = '';\n    return this.inputBuffer.shift();\n  }\n}\n\n/// UTILITY FUNCTIONS /////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nconst u_is_stream = obj =>\n  obj instanceof Readable ||\n  obj instanceof Writable ||\n  obj instanceof Duplex ||\n  obj instanceof Transform;\n\nconst u_modname = instance => instance.modName || instance.id;\n\n/// EXPORTS ///////////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nexport default UrModule;\n"],
  "mappings": "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",
  "names": ["module", "module", "makeTerminalOut", "row", "module", "express", "import_prompts", "D_ASYNC"]
}
